{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\billz\\\\OneDrive\\\\Desktop\\\\resume_tinder\\\\screens\\\\LoginPage.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Google from 'expo-google-app-auth';\n\nvar LoginPage = function (_React$Component) {\n  _inherits(LoginPage, _React$Component);\n\n  var _super = _createSuper(LoginPage);\n\n  function LoginPage() {\n    var _this;\n\n    _classCallCheck(this, LoginPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.signInWithGoogleAsync = function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Google.logInAsync({\n                iosClientId: '911883068587-aa931gikh9g1tk3op81t8kai970d5e2d.apps.googleusercontent.com',\n                scopes: ['profile', 'email']\n              }));\n\n            case 2:\n              result = _context.sent;\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }\n      }, React.createElement(Button, {\n        title: \"Sign In with Google\",\n        onPress: function onPress() {\n          _this2.signInWithGoogleAsync();\n\n          _this2.props.navigation.navigate('LoadingPage');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return LoginPage;\n}(React.Component);\n\nexport { LoginPage as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/billz/OneDrive/Desktop/resume_tinder/screens/LoginPage.tsx"],"names":["React","Google","LoginPage","signInWithGoogleAsync","logInAsync","iosClientId","scopes","result","styles","container","props","navigation","navigate","Component","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":";;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAaA,OAAO,KAAKC,MAAZ,MAAwB,sBAAxB;;IAOqBC,S;;;;;;;;;;;;;;;;UACjBC,qB,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CA0BCF,MAAM,CAACG,UAAP,CAAkB;AACnCC,gBAAAA,WAAW,EAAE,0EADsB;AAEnCC,gBAAAA,MAAM,EAAE,CACJ,SADI,EAEJ,OAFI;AAF2B,eAAlB,CA1BD;;AAAA;AA0BdC,cAAAA,MA1Bc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;6BAqCf;AAAA;;AACL,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAGC,MAAM,CAACC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,qBAAd;AAAoC,QAAA,OAAO,EAAE,mBAAM;AAE/C,UAAA,MAAI,CAACN,qBAAL;;AACA,UAAA,MAAI,CAACO,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+B,aAA/B;AACH,SAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AASH;;;;EAhDkCZ,KAAK,CAACa,S;;SAAxBX,S;AAmDrB,IAAMM,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC7BN,EAAAA,SAAS,EAAE;AACPO,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,UAAU,EAAE,QAFL;AAGPC,IAAAA,cAAc,EAAE;AAHT;AADkB,CAAlB,CAAf","sourcesContent":["import ExpoStatusBar from 'expo-status-bar/build/ExpoStatusBar';\r\nimport React from 'react';\r\nimport {\r\n    ActivityIndicator,\r\n    Button,\r\n\tStyleSheet,\r\n\tText,\r\n\tView,\r\n} from 'react-native';\r\nimport {\r\n    NavigationScreenProp,\r\n    NavigationState,\r\n    NavigationParams,\r\n} from 'react-navigation';\r\nimport * as Google from 'expo-google-app-auth';\r\nimport { firebaseConfig } from '../config';\r\n\r\ninterface Props {\r\n    navigation: NavigationScreenProp<NavigationState, NavigationParams>\r\n}\r\n\r\nexport default class LoginPage extends React.Component<Props> {\r\n    signInWithGoogleAsync = async () => {\r\n        // try {\r\n        //     const result = await Google.logInAsync({\r\n        //         behaviour: 'web',\r\n        //         iosClientID: '911883068587-aa931gikh9g1tk3op81t8kai970d5e2d.apps.googleusercontent.com',\r\n        //         scopes: [\r\n        //             'profile',\r\n        //             'email',\r\n        //         ],\r\n        //     });\r\n\r\n        //     if (result.type === 'success') {\r\n        //         return result.accessToken;\r\n        //     } else {\r\n        //         return {\r\n        //             cancelled: true,\r\n        //         }\r\n        //     }\r\n        // } catch (e) {\r\n        //     alert('failed');\r\n        //     console.log(\"asdfadsfasdfasdfasdfsdaf\");\r\n        //     return {\r\n        //         error: true,\r\n        //     }\r\n        // }\r\n        // const { type, accessToken, user } = await Google.logInAsync({\r\n        const result = await Google.logInAsync({\r\n            iosClientId: '911883068587-aa931gikh9g1tk3op81t8kai970d5e2d.apps.googleusercontent.com',\r\n            scopes: [\r\n                'profile',\r\n                'email'\r\n            ],\r\n        });\r\n\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <View style={ styles.container } >\r\n                <Button title='Sign In with Google' onPress={() => {\r\n                    // alert('button pressed');\r\n                    this.signInWithGoogleAsync();\r\n                    this.props.navigation.navigate('LoadingPage');\r\n                }}/>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}